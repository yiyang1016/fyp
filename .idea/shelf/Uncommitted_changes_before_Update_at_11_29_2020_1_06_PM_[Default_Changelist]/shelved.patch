Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.covid_19shoppingcentre\">\r\n    <!--\r\n         The ACCESS_COARSE/FINE_LOCATION permissions are not required to use\r\n         Google Maps Android API v2, but you must specify either coarse or fine\r\n         location permissions for the \"MyLocation\" functionality.\r\n    -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\r\n    <uses-feature\r\n        android:name=\"android.hardware.bluetooth_le\"\r\n        android:required=\"true\" />\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\" /> <!-- Required only if your app isn't using the Device Companion Manager. -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher_covid_round\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n\r\n        <activity android:name=\".tabletSetLimitation\"></activity>\r\n        <activity android:name=\".tabletStoreControlMain\"\r\n            android:parentActivityName=\".Store_List\"></activity>\r\n        <activity\r\n            android:name=\".DashboardMain\"\r\n            android:parentActivityName=\".StaffMainActivity\" />\r\n        <activity\r\n            android:name=\".GenerateDailyReportJava\"\r\n            android:parentActivityName=\".StaffMainActivity\"/>\r\n        <activity\r\n            android:name=\".StaffRegistration\"\r\n            android:parentActivityName=\".StaffMainActivity\" />\r\n        <activity\r\n            android:name=\".PieChartMaleFemale\"\r\n            android:parentActivityName=\".DashboardMain\" />\r\n        <activity android:name=\".uploadStorePicture\" />\r\n        <activity\r\n            android:name=\".storeRegistration\"\r\n            android:parentActivityName=\".tabletStoreControlMain\" />\r\n        <activity android:name=\".questionMobile\" />\r\n        <activity android:name=\".tabletStoreCurrentCust\" />\r\n        <activity\r\n            android:name=\".tabletStoreLoginVarification\"\r\n            android:parentActivityName=\".StaffMainActivity\" />\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"com.example.covid_19shoppingcentre\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"@string/google_maps_key\" />\r\n\r\n        <activity\r\n            android:name=\".social_distance_score_history\"\r\n            android:label=\"Score History\"\r\n             />\r\n        <activity\r\n            android:name=\".ViewPlace\"\r\n            android:label=\"Hospital Near Me\"\r\n            />\r\n        <activity\r\n            android:name=\".distance_tracking\"\r\n            android:label=\"Distance Tracking\"\r\n            />\r\n        <activity\r\n            android:name=\".nearby_hospital\"\r\n            />\r\n        <activity\r\n            android:name=\".StaffMainActivity\"\r\n            android:label=\"Staff Main Page\" />\r\n        <activity android:name=\".CheckInScCustomer_List\" />\r\n        <activity android:name=\".MemberInformationActivity\" />\r\n        <activity\r\n            android:name=\".QRScannerActivity\"\r\n            android:label=\"QR Scanner\" />\r\n        <activity android:name=\".CustomerInformationActivity\" />\r\n        <activity android:name=\".ReserveStore_List\" />\r\n        <activity android:name=\".ReserveDate\" />\r\n        <activity android:name=\".ReserveTime\" />\r\n        <activity android:name=\".ReserveConfirmationActivity\" />\r\n        <activity android:name=\".Reservation_List\" />\r\n        <activity\r\n            android:name=\".ReserveDetailsActivity\"\r\n            android:launchMode=\"singleTop\" />\r\n        <activity android:name=\".ReserveDetailsPassActivity\" />\r\n        <activity android:name=\".StaffStoreDetailsActivity\" />\r\n        <activity android:name=\".Store_List\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:label=\"MidValley\" />\r\n        <activity android:name=\".MemberRegister\" />\r\n        <activity android:name=\".MemberLogin\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity android:name=\".QRCodeGenerator\" />\r\n        <activity android:name=\".BodyTemperature\">\r\n        </activity>\r\n        <activity android:name=\".QRCodeScanner\"/>\r\n        <activity android:name=\".VisitHistory\"/>\r\n        <activity android:name=\".CustomerRecordSelecting\"/>\r\n        <activity android:name=\".QRScannerCheckOutActivity\"/>\r\n        <activity android:name=\".CheckOutShoppingActivity\"/>\r\n\r\n        <service\r\n            android:name=\".checkService\"\r\n            android:enabled=\"true\"\r\n            android:exported=\"true\" />\r\n        <service\r\n            android:name=\".staffService\"\r\n            android:enabled=\"true\"\r\n            android:exported=\"true\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.gms.version\"\r\n            android:value=\"@integer/google_play_services_version\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision fd3cd09f104de345c7f0c6f8568b00c7b487f6bc)
+++ app/src/main/AndroidManifest.xml	(date 1606378582486)
@@ -33,7 +33,7 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
-
+        <uses-library android:name="org.apache.http.legacy" android:required="false"/>
         <activity android:name=".tabletSetLimitation"></activity>
         <activity android:name=".tabletStoreControlMain"
             android:parentActivityName=".Store_List"></activity>
Index: app/src/main/java/com/example/covid_19shoppingcentre/distance_tracking.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.covid_19shoppingcentre\r\n\r\n\r\nimport android.Manifest\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.bluetooth.BluetoothAdapter\r\nimport android.bluetooth.BluetoothDevice\r\nimport android.bluetooth.BluetoothManager\r\nimport android.bluetooth.le.BluetoothLeScanner\r\nimport android.bluetooth.le.ScanCallback\r\nimport android.bluetooth.le.ScanResult\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\nimport kotlinx.android.synthetic.main.activity_distance_tracking.*\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\n\r\n\r\nclass distance_tracking : AppCompatActivity() {\r\n\r\n    private val REQUEST_BLUETOOTH_TURN_ON = 1\r\n    private val BLE_SCAN_PERIOD: Long = 100000\r\n    private lateinit var bleAdapter: BluetoothAdapter\r\n    private lateinit var bleManager: BluetoothManager\r\n    private lateinit var bleScanner: BluetoothLeScanner\r\n    private lateinit var bleScanCallback: BleScanCallback\r\n    private var bleScanResults = mutableMapOf<String?, BluetoothDevice?>()\r\n    private lateinit var bleScanHandler: Handler\r\n    var count = 0\r\n    var resumeCount = 0\r\n    //    var deviceList = findViewById<EditText>(R.id.showDevice)\r\n   // private lateinit var database:     DatabaseReference\r\n    private var database = FirebaseDatabase.getInstance().getReference(\"Member\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_distance_tracking)\r\n\r\n        setActionBar()\r\n\r\n        bleScanHandler = Handler()\r\n        bleManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager\r\n        bleAdapter = bleManager.adapter\r\n        if (!bleAdapter.isEnabled) {\r\n            val bluetoothTurnOn = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\r\n            startActivityForResult(bluetoothTurnOn, REQUEST_BLUETOOTH_TURN_ON)\r\n        }\r\n        val permissionCheck =\r\n            ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)\r\n        if (permissionCheck != PackageManager.PERMISSION_GRANTED) {\r\n            if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n                    this,\r\n                    Manifest.permission.ACCESS_FINE_LOCATION\r\n                )\r\n            ) {\r\n                Toast.makeText(\r\n                    this,\r\n                    \"The permission to get BLE location data is required\",\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            } else {\r\n                requestPermissions(\r\n                    arrayOf(\r\n                        Manifest.permission.ACCESS_COARSE_LOCATION,\r\n                        Manifest.permission.ACCESS_FINE_LOCATION\r\n                    ), 1\r\n                )\r\n            }\r\n        } else {\r\n            Toast.makeText(this, \"Location permissions already granted\", Toast.LENGTH_SHORT).show()\r\n        }\r\n\r\n        //val getVisible = Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE)\r\n        //startActivityForResult(getVisible, 0)\r\n\r\n        bleImageButton.setOnClickListener { view ->\r\n            //check Bluetooth status every 3 seconds\r\n            if(count == 0){\r\n                if(resumeCount == 1){\r\n                    onResume()\r\n                    resumeCount==0\r\n                }\r\n                val handler = Handler()\r\n                handler.postDelayed(object : Runnable {\r\n                    override fun run() {\r\n                        //Call your function here\r\n                        if (!bleAdapter.isEnabled) {\r\n                            showNotification(\r\n                                \"Please Enable Bluetooth\",\r\n                                \"Kindly Enable the Bluetooth inside your phone\"\r\n                            )\r\n                        }\r\n                            handler.postDelayed(this, 3000)//3 sec delay\r\n                    }\r\n                }, 0)\r\n\r\n                status.text = \"STATUS : ON\"\r\n                bleStartScan.run()\r\n                bleScanHandler.postDelayed(bleStopScan, this.BLE_SCAN_PERIOD)\r\n                count++\r\n                val bluetoothScanninghandler = Handler()\r\n                bluetoothScanninghandler.postDelayed(object : Runnable {\r\n                    override fun run() {\r\n                        //Call your function here\r\n                        println(bleScanCallback.addRssi.map { \"bleScanCallback.addRSSi\" + it.key.toString() + '-' + it.value.toString() })\r\n                        if (bleScanCallback.addRssi.isNotEmpty()) {\r\n                            for ((key, value) in bleScanCallback.addRssi) {\r\n                                val rssi = value\r\n                                //compareValues(rssi, -73) < 0\r\n                                if (rssi > -63 && rssi <= 0) {\r\n                                    marksDeduct(5, rssi)\r\n                                    showNotification(\r\n                                        \"Close Distance\",\r\n                                        \"Please Keep Your Social Distance More than 1.5 Meters.\"\r\n                                    )\r\n                                }else if (rssi < -69 && rssi > -72) {\r\n                                    marksDeduct(3, rssi)\r\n                                    showNotification(\r\n                                        \"Close Distance\",\r\n                                        \"Please Keep Your Social Distance More than 1.5 Meters.\"\r\n                                    )\r\n                                }else if (rssi < -73 && rssi > -100) {\r\n                                    marksDeduct(2, rssi)\r\n                                    showNotification(\r\n                                        \"Close Distance\",\r\n                                        \"Please Keep Your Social Distance More than 1.5 Meters.\"\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                        bleScanCallback.addRssi.clear()\r\n                        bluetoothScanninghandler.postDelayed(this, 10000)//10 sec delay\r\n                    }\r\n                }, 0)\r\n\r\n                /*secondCount++\r\n                if(secondCount == 1){\r\n                    onPause()\r\n                }else if(secondCount == 2){\r\n                    onResume()\r\n                    secondCount = 0\r\n                }*/\r\n            }else if(count == 1 ){\r\n                onPause()\r\n                //secondCount++\r\n            }\r\n\r\n\r\n            //Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG).setAction(\"Action\", null).show()\r\n\r\n        }\r\n    }\r\n\r\n    //Start Scan nearby bluetooth\r\n    private val bleStartScan = Runnable {\r\n        bleScanner = bleAdapter.bluetoothLeScanner\r\n        bleScanCallback = BleScanCallback(bleScanResults as HashMap<String?, BluetoothDevice?>)\r\n        bleScanCallback.setContext(this.applicationContext)\r\n        bleScanner.startScan(bleScanCallback)\r\n        Toast.makeText(this.applicationContext, \"Start Scan the Nearby Device\", Toast.LENGTH_SHORT)\r\n            .show()\r\n        //bleScanHandler.postDelayed(bleStopScan, this.BLE_SCAN_PERIOD)\r\n    }\r\n\r\n    private val bleStopScan = Runnable {\r\n        if (bleScanner != null) {\r\n            bleScanner.stopScan(bleScanCallback)\r\n            \r\n            //println(bleScanCallback.addRssi.map { \"bleScanCallback.addRSSi\" + it.key.toString() + '-' + it.value.toString()})\r\n            bleScanResults.clear()\r\n            bleScanCallback.resultOfScan.clear()\r\n            bleScanCallback.addRssi.clear()\r\n            //bleStartScan.run()\r\n        }\r\n        Toast.makeText(this.applicationContext, \" BLE Scanning Ended\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n\r\n    class BleScanCallback(resultMap: HashMap<String?, BluetoothDevice?>) : ScanCallback() {\r\n        var resultOfScan = resultMap\r\n        private var context: Context? = null\r\n        var deviceNameAddress: HashMap<String?, String?> = HashMap<String?, String?>()\r\n        var addRssi: HashMap<String, Int> = HashMap<String, Int>()\r\n\r\n        fun setContext(context: Context) {\r\n            this.context = context\r\n        }\r\n\r\n        override fun onScanResult(callbackType: Int, result: ScanResult) {\r\n            addScanResult(result)\r\n        }\r\n\r\n        override fun onBatchScanResults(results: MutableList<ScanResult>?) {\r\n            results?.forEach { result -> addScanResult(result) }\r\n        }\r\n\r\n        override fun onScanFailed(errorCode: Int) {\r\n            Toast.makeText(\r\n                this.context,\r\n                \"BLE Failed to scan\" + \"Error Code: \" + errorCode,\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n        }\r\n\r\n        fun addScanResult(scanResult: ScanResult) {\r\n            val bleDevice = scanResult.device\r\n            val deviceAddress = bleDevice.address\r\n            val rssiValue = scanResult.rssi\r\n            if (!resultOfScan.contains(deviceAddress)) {\r\n                resultOfScan.put(deviceAddress, bleDevice)\r\n                if (this.context != null) {\r\n                    /*Toast.makeText(\r\n                        this.context,\r\n                        bleDevice?.name + \":\" + bleDevice?.address + \"RSSI\" + rssiValue,\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()*/\r\n                    //deviceNameAddress.put(bleDevice?.name, deviceAddress)\r\n                    addRssi.put(deviceAddress, rssiValue)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        when (requestCode) {\r\n            REQUEST_BLUETOOTH_TURN_ON -> {\r\n                when (requestCode) {\r\n                    RESULT_OK -> {\r\n                        Toast.makeText(\r\n                            this.applicationContext,\r\n                            \"Bluetooth Activated\",\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                    RESULT_CANCELED -> {\r\n                        Toast.makeText(\r\n                            this.applicationContext,\r\n                            \"Bluetooth Failed\",\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun showNotification(title: String, message: String) {\r\n        val mNotificationManager =\r\n            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r\n            val channel = NotificationChannel(\r\n                \"COVID-19 Shopping Centre\",\r\n                \"Bluetooth Disable\",\r\n                NotificationManager.IMPORTANCE_DEFAULT\r\n            )\r\n            channel.description = \"Bluetooth are disabled by user\"\r\n            mNotificationManager.createNotificationChannel(channel)\r\n        }\r\n        val fullScreenIntent = Intent(this, distance_tracking::class.java)\r\n        val fullScreenPendingIntent = PendingIntent.getActivity(\r\n            this, 0,\r\n            fullScreenIntent, PendingIntent.FLAG_UPDATE_CURRENT\r\n        )\r\n        val mBuilder = NotificationCompat.Builder(applicationContext, \"COVID-19 Shopping Centre\")\r\n            .setSmallIcon(R.mipmap.ic_launcher_covid_round) // notification icon\r\n            .setContentTitle(title) // title for notification\r\n            .setContentText(message)// message for notification\r\n            .setAutoCancel(true) // clear notification after click\r\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\r\n            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\r\n            .setFullScreenIntent(fullScreenPendingIntent, true)\r\n        mNotificationManager.notify(0, mBuilder.build())\r\n    }\r\n\r\n    fun marksDeduct(marks: Int, rssiValue: Int) {\r\n        val id = intent.getStringExtra(\"MemberID\")\r\n        val ref = FirebaseDatabase.getInstance().getReference(\"SocialDistanceScore\")\r\n        var scoreId = \"\"\r\n        val refSearch =\r\n            FirebaseDatabase.getInstance().getReference(\"SocialDistanceScore\").orderByKey()\r\n                .limitToLast(1)\r\n\r\n\r\n        //Create new score history data\r\n        refSearch.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onCancelled(error: DatabaseError) {\r\n                val text = \"Connection Failed\"\r\n                Toast.makeText(applicationContext, text, Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            override fun onDataChange(p0: DataSnapshot) {\r\n                if (p0.exists()) {\r\n                    for (p0 in p0.children) {\r\n                        val getScoreId = p0.getValue(Score::class.java)\r\n                        scoreId = getScoreId?.Score_Id.toString()\r\n                    }\r\n\r\n                    val cal = ((scoreId.substring(1, 6)).toInt()) + 1\r\n                    val num = 100000 + cal\r\n                    val newId = \"S\" + num.toString().substring(1, 6)\r\n\r\n                    val currentDateTime1 = LocalDateTime.now()\r\n                    val dateFormat1: DateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyyMMdd\")\r\n                    val dateText1 = currentDateTime1.format(dateFormat1)\r\n                    val data = SocialDistanceScore(\r\n                        newId,\r\n                        \"Close Contact\",\r\n                        marks,\r\n                        dateText1, id, rssiValue\r\n                    )\r\n\r\n                    ref.child(newId).setValue(data).addOnSuccessListener {\r\n                        //Toast.makeText(applicationContext, \"Added Successfully\", Toast.LENGTH_SHORT)\r\n                        //    .show()\r\n                    }\r\n\r\n                    val refSearch = FirebaseDatabase.getInstance().getReference().child(\"Member\")\r\n                        .orderByChild(\"Id\").equalTo(id)\r\n                    refSearch.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                        override fun onCancelled(error: DatabaseError) {\r\n                            val text = \"Connection Failed\"\r\n                            Toast.makeText(applicationContext, text, Toast.LENGTH_SHORT).show()\r\n                        }\r\n\r\n                        override fun onDataChange(p0: DataSnapshot) {\r\n                            if (p0.exists()) {\r\n                                for (p0 in p0.children) {\r\n                                    val current =\r\n                                        Integer.parseInt(p0.child(\"CurrentScore\").value.toString()) - marks\r\n                                    if (current == 70 || current == 50 || current == 30) {\r\n                                        showNotification(\r\n                                            \"Warning Message\",\r\n                                            \"Social Distance Mark Low than $current. Please keep social distance before get bar!\"\r\n                                        )\r\n                                    }\r\n                                    database.child(id).child(\"CurrentScore\").setValue(current)\r\n                                }\r\n                            } else {\r\n                                Toast.makeText(\r\n                                    applicationContext,\r\n                                    \"CurrentScore Missing from the database\",\r\n                                    Toast.LENGTH_SHORT\r\n                                )\r\n                                    .show()\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                }\r\n\r\n            }\r\n\r\n        })\r\n    }\r\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\r\n        //Inflate the menu; this adds items to the action bar if it is present\r\n        menuInflater.inflate(R.menu.history, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        val id = intent.getStringExtra(\"MemberID\")\r\n\r\n        val intent1 = Intent(this, MainActivity::class.java).apply {\r\n            putExtra(\"MemberID\", id)\r\n        }\r\n        startActivity(intent1)\r\n\r\n        //Handle action bar item clicks here.\r\n        //The action bar will automatically handle clicks on the Home/Up button, so long\r\n        //as you specify a parent activity in AndroidManfest.xml\r\n        when (item.itemId){\r\n            R.id.historyBtn -> {\r\n                val intent = Intent(this, social_distance_score_history::class.java).apply {\r\n                    putExtra(\"MemberID\", id)\r\n                }\r\n\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n        return false\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        count = 0\r\n        status.text = \"STATUS : OFF\"\r\n        bleStopScan\r\n        resumeCount++\r\n        //bleScanHandler.postDelayed(bleStopScan, this.BLE_SCAN_PERIOD)\r\n    }\r\n\r\n    private fun setActionBar(){\r\n        val actionBar: ActionBar? = supportActionBar\r\n        actionBar!!.title = \"Distance Tracking\"\r\n        actionBar!!.setDisplayHomeAsUpEnabled(true)\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/covid_19shoppingcentre/distance_tracking.kt	(revision fd3cd09f104de345c7f0c6f8568b00c7b487f6bc)
+++ app/src/main/java/com/example/covid_19shoppingcentre/distance_tracking.kt	(date 1606620510845)
@@ -36,7 +36,7 @@
 class distance_tracking : AppCompatActivity() {
 
     private val REQUEST_BLUETOOTH_TURN_ON = 1
-    private val BLE_SCAN_PERIOD: Long = 100000
+    private val BLE_SCAN_PERIOD: Long = 200000
     private lateinit var bleAdapter: BluetoothAdapter
     private lateinit var bleManager: BluetoothManager
     private lateinit var bleScanner: BluetoothLeScanner
@@ -83,7 +83,7 @@
                 )
             }
         } else {
-            Toast.makeText(this, "Location permissions already granted", Toast.LENGTH_SHORT).show()
+            //Toast.makeText(this, "Location permissions already granted", Toast.LENGTH_SHORT).show()
         }
 
         //val getVisible = Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE)
@@ -145,7 +145,7 @@
                             }
                         }
                         bleScanCallback.addRssi.clear()
-                        bluetoothScanninghandler.postDelayed(this, 10000)//10 sec delay
+                        bluetoothScanninghandler.postDelayed(this, 20000)//20 sec delay
                     }
                 }, 0)
 
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app\"s APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Automatically convert third-party libraries to use AndroidX\r\nandroid.enableJetifier=true\r\n# Kotlin code style for this project: \"official\" or \"obsolete\":\r\nkotlin.code.style=official
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- gradle.properties	(revision fd3cd09f104de345c7f0c6f8568b00c7b487f6bc)
+++ gradle.properties	(date 1606379759991)
@@ -6,8 +6,8 @@
 # http://www.gradle.org/docs/current/userguide/build_environment.html
 # Specifies the JVM arguments used for the daemon process.
 # The setting is particularly useful for tweaking memory settings.
-org.gradle.jvmargs=-Xmx2048m
-# When configured, Gradle will run in incubating parallel mode.
+org.gradle.jvmargs=-Xmx1024m
+# When configured, Gradle will run in incubating par allel mode.
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Sat Oct 10 11:44:47 SGT 2020\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-all.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision fd3cd09f104de345c7f0c6f8568b00c7b487f6bc)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1606378814632)
@@ -1,6 +1,6 @@
-#Sat Oct 10 11:44:47 SGT 2020
+#Thu Nov 26 16:20:14 SGT 2020
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.1.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    ext.kotlin_version = \"1.3.72\"\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath \"com.android.tools.build:gradle:4.0.2\"\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\r\n        classpath 'com.google.gms:google-services:4.3.4'\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url 'https://jitpack.io' }\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision fd3cd09f104de345c7f0c6f8568b00c7b487f6bc)
+++ build.gradle	(date 1606378814615)
@@ -6,7 +6,7 @@
         jcenter()
     }
     dependencies {
-        classpath "com.android.tools.build:gradle:4.0.2"
+        classpath 'com.android.tools.build:gradle:4.1.1'
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
         classpath 'com.google.gms:google-services:4.3.4'
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n        <option name=\"useQualifiedModuleNames\" value=\"true\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision fd3cd09f104de345c7f0c6f8568b00c7b487f6bc)
+++ .idea/gradle.xml	(date 1606379350879)
@@ -5,6 +5,7 @@
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
         <option name="testRunner" value="PLATFORM" />
+        <option name="disableWrapperSourceDistributionNotification" value="true" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
         <option name="gradleJvm" value="1.8" />
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-android-extensions'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.covid_19shoppingcentre\"\r\n        minSdkVersion 24\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        multiDexEnabled true\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    sourceSets {\r\n        main {\r\n            res {\r\n                srcDirs 'src/main/res', 'src/main/res/layout/customer_list'\r\n            }\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n        coreLibraryDesugaringEnabled true\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'androidx.core:core-ktx:1.3.2'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    implementation 'androidx.recyclerview:recyclerview:1.1.0'\r\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\r\n    implementation 'com.google.firebase:firebase-database:19.5.0'\r\n    implementation fileTree(dir: 'lib', include: ['*.aar', '*.jar'], exclude: [])\r\n    implementation files('lib\\\\activation.jar')\r\n    implementation files('lib\\\\additionnal.jar')\r\n    implementation files('lib\\\\mail.jar')\r\n\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n    //JAVA Firebase\r\n\r\n    //Picasso Load Image\r\n    implementation 'com.squareup.picasso:picasso:2.5.2'\r\n\r\n    //Firebase\r\n    implementation platform('com.google.firebase:firebase-bom:25.12.0')\r\n    //implementation 'com.google.firebase:firebase-analytics-ktx'\r\n    implementation 'com.google.firebase:firebase-database-ktx'\r\n    implementation 'com.google.firebase:firebase-analytics:17.2.1'\r\n    //Firebase Realtime Database\r\n    implementation 'com.firebaseui:firebase-ui-database:2.3.0'\r\n    //Firebase Storage\r\n    implementation 'com.google.firebase:firebase-storage-ktx'\r\n    implementation 'com.google.firebase:firebase-core:16.0.7'\r\n    implementation 'com.google.firebase:firebase-storage:16.1.0'\r\n    implementation 'com.google.firebase:firebase-auth:16.2.0'\r\n    //libraries(QR Scanner)\r\n    implementation 'com.github.nisrulz:qreader:2.1.2'\r\n    implementation 'com.karumi:dexter:5.0.0'\r\n    implementation 'com.google.android.gms:play-services-vision:18.0.0'\r\n\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n\r\n    //Image Slider\r\n    //implementation 'com.github.denzcoskun:ImageSlideshow:0.0.7'\r\n\r\n    //Google Map\r\n    implementation 'com.android.support:appcompat-v7:29.1.1'\r\n    implementation 'com.android.support:design:29.1.1'\r\n    //noinspection UseOfBundledGooglePlayServices\r\n    //compile 'com.google.android.gms:play-services:11.0.0'\r\n    implementation 'com.google.android.gms:play-services-location:17.1.0'\r\n    implementation 'com.squareup.retrofit2:retrofit:2.7.1'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'\r\n    implementation 'com.squareup.retrofit2:converter-scalars:2.7.1'\r\n    implementation(\"com.squareup.okhttp3:okhttp:3.14.7\")\r\n    implementation 'com.squareup.okhttp3:okhttp:3.11.0'\r\n    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'\r\n    implementation 'com.github.d-max:spots-dialog:0.7@aar'\r\n\r\n    //date and time\r\n    implementation 'com.jakewharton.threetenabp:threetenabp:1.3.0'\r\n    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.10'\r\n\r\n    //chart\r\n    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'\r\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\r\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.1'\r\n    implementation 'com.google.android.material:material:1.0.0'\r\n\r\n    //libraries(QR Code Generator)\r\n    implementation 'androidmads.library.qrgenearator:QRGenearator:1.0.4'\r\n    implementation 'com.google.zxing:core:3.3.2'\r\n    //ADDED\r\n    implementation 'com.android.support:multidex:1.0.3'\r\n    implementation 'com.google.android.gms:play-services-vision:19.0.0'\r\n\r\n    //libraries(QR Scanner)\r\n    implementation 'com.github.nisrulz:qreader:2.1.2'\r\n    implementation 'com.karumi:dexter:5.0.0'\r\n    implementation 'com.google.android.gms:play-services-vision:18.0.0'\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n\r\n    implementation 'com.journeyapps:zxing-android-embedded:4.1.0'\r\n\r\n    implementation 'com.github.d-max:spots-dialog:1.1@aar'\r\n\r\n    //Report Libraries\r\n    implementation 'com.itextpdf:itextg:5.5.10'\r\n    implementation 'com.karumi:dexter:5.0.0'\r\n\r\n    implementation 'com.journeyapps:zxing-android-embedded:4.1.0'\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision fd3cd09f104de345c7f0c6f8568b00c7b487f6bc)
+++ app/build.gradle	(date 1606382431390)
@@ -42,7 +42,7 @@
     implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
     implementation 'androidx.core:core-ktx:1.3.2'
     implementation 'androidx.appcompat:appcompat:1.2.0'
-    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
+    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
     implementation 'androidx.recyclerview:recyclerview:1.1.0'
     implementation 'com.google.android.gms:play-services-maps:17.0.0'
     implementation 'com.google.firebase:firebase-database:19.5.0'
Index: app/src/main/java/com/example/covid_19shoppingcentre/nearby_hospital.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.covid_19shoppingcentre\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.Canvas\r\nimport android.location.Location\r\nimport android.location.LocationProvider\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.MenuItem\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.covid_19shoppingcentre.Common.Common\r\nimport com.example.covid_19shoppingcentre.Remote.IGoogleAPIService\r\nimport com.example.covid_19shoppingcentre.models.MyPlaces\r\nimport com.google.android.gms.location.*\r\n\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.*\r\nimport kotlinx.android.synthetic.main.activity_nearby_hospital.*\r\nimport retrofit2.Call\r\nimport retrofit2.Response\r\nimport java.lang.StringBuilder\r\nimport java.net.CacheRequest\r\nimport java.util.jar.Manifest\r\nimport javax.security.auth.callback.Callback\r\n\r\nclass nearby_hospital : AppCompatActivity(), OnMapReadyCallback {\r\n\r\n    private lateinit var mMap: GoogleMap\r\n\r\n    private var latitude : Double = 0.toDouble()\r\n    private var longtitude : Double = 0.toDouble()\r\n\r\n    private lateinit var mLastLocation:Location\r\n    private var mMarker: Marker?=null\r\n\r\n    //Location\r\n    lateinit var fusedLocationProviderClient: FusedLocationProviderClient\r\n    lateinit var locationRequest: LocationRequest\r\n    lateinit var locationCallback: LocationCallback\r\n\r\n    companion object{\r\n        private const val  MY_PERMISSION_CODE: Int = 1000\r\n    }\r\n\r\n    lateinit var mService:IGoogleAPIService\r\n\r\n    internal lateinit var currentPlace:MyPlaces\r\n\r\n    //pass current location lat and lng\r\n    public var  currentLat = 0.0\r\n    public var  currentLng = 0.0\r\n\r\n    var currentMember: String? = \"\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_nearby_hospital)\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        val mapFragment = supportFragmentManager\r\n            .findFragmentById(R.id.maps) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n        currentMember = intent.getStringExtra(\"MemberID\")\r\n        //Init Service\r\n        mService = Common.googleApiService\r\n        setActionBar()\r\n        //Request runtime permission\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){\r\n            if(checkLocationPermission()){\r\n                buildLocationRequest();\r\n                buildLocationCallBack();\r\n\r\n                fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\r\n                fusedLocationProviderClient.requestLocationUpdates(locationRequest,locationCallback, Looper.myLooper());\r\n            }\r\n           }else{\r\n            buildLocationRequest();\r\n            buildLocationCallBack();\r\n\r\n            fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\r\n            fusedLocationProviderClient.requestLocationUpdates(locationRequest,locationCallback, Looper.myLooper());\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun nearByPlace(typePlace: String) {\r\n        //Clear all marker on Map\r\n        //mMap.clear()\r\n        //build URL request base on location\r\n        val url = getUrl(latitude,longtitude,typePlace)\r\n\r\n        mService.getNearbyPlaces(url)\r\n            .enqueue(object :retrofit2.Callback<MyPlaces> {\r\n                override fun onResponse(call: Call<MyPlaces>?,response: Response<MyPlaces>?) {\r\n\r\n                    currentPlace=response!!.body()!!\r\n                    if(response!!.isSuccessful){\r\n\r\n                        for(i in 0 until response!!.body()!!.results!!.size)\r\n                        {\r\n                            val markerOptions = MarkerOptions()\r\n                            val googlePlace = response.body()!!.results!![i]\r\n                            val lat = googlePlace.geometry!!.location!!.lat\r\n                            val lng = googlePlace.geometry!!.location!!.lng\r\n                            val placeName = googlePlace.name\r\n                            val latLng = LatLng(lat,lng)\r\n\r\n                            markerOptions.position(latLng)\r\n                            markerOptions.title(placeName)\r\n                            if(typePlace.equals(\"hospital\"))\r\n                                markerOptions.icon(BitmapDescriptorFactory.defaultMarker())\r\n                            else if(typePlace.equals(\"market\"))\r\n                                markerOptions.icon(BitmapDescriptorFactory.defaultMarker())\r\n                            else if(typePlace.equals(\"restaurant\"))\r\n                                markerOptions.icon(BitmapDescriptorFactory.defaultMarker())\r\n                            else if(typePlace.equals(\"school\"))\r\n                                markerOptions.icon(BitmapDescriptorFactory.defaultMarker())\r\n\r\n                            markerOptions.snippet(i.toString())//Assign index for Market\r\n                            //Add marker to map\r\n                            mMap!!.addMarker(markerOptions)\r\n                            //moveCamera\r\n                            //mMap!!.moveCamera(CameraUpdateFactory.newLatLng(latLng))\r\n                            //mMap!!.animateCamera(CameraUpdateFactory.zoomTo(15f))\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                override fun onFailure(call: Call<MyPlaces>, t: Throwable) {\r\n                    Toast.makeText(baseContext, \"\"+t!!.message,Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n    private fun getUrl(latitude: Double, longtitude: Double, typePlace: String): String {\r\n\r\n        val googlePlaceUrl = StringBuilder(\"https://maps.googleapis.com/maps/api/place/nearbysearch/json\")\r\n        googlePlaceUrl.append(\"?location=$latitude,$longtitude\")\r\n        googlePlaceUrl.append(\"&radius=10000\") //10km\r\n        googlePlaceUrl.append(\"&type=$typePlace\")\r\n        googlePlaceUrl.append(\"&key=AIzaSyDQFRH8H5JA_Tw6Rnwne4CVB2VaNagqvsM\")\r\n\r\n        Log.d(\"URL_DEBUG\",googlePlaceUrl.toString())\r\n        return googlePlaceUrl.toString()\r\n\r\n    }\r\n\r\n    private fun buildLocationCallBack() {\r\n        locationCallback = object : LocationCallback(){\r\n            override fun onLocationResult(p0: LocationResult?) {\r\n                mLastLocation = p0!!.lastLocation//Get Last Location\r\n\r\n                if(mMarker !=null){\r\n                    mMarker!!.remove()\r\n                }\r\n\r\n                latitude = mLastLocation.latitude\r\n                longtitude = mLastLocation.longitude\r\n\r\n                val latLng = LatLng(latitude,longtitude)\r\n                //save lat & lng to public variable\r\n                currentLat = latitude\r\n                currentLng = longtitude\r\n                val markerOptions = MarkerOptions()\r\n                    .position(latLng)\r\n                    .title(\"Your position\")\r\n                    .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN))\r\n                mMarker = mMap!!.addMarker(markerOptions)\r\n\r\n                //Move Camera\r\n                mMap!!.moveCamera(CameraUpdateFactory.newLatLng(latLng))\r\n                mMap.moveCamera(CameraUpdateFactory.zoomTo(13f))\r\n                nearByPlace(\"hospital\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun buildLocationRequest() {\r\n        locationRequest = LocationRequest()\r\n        locationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n        locationRequest.interval = 5000\r\n        locationRequest.fastestInterval = 3000\r\n        locationRequest.smallestDisplacement = 10f\r\n    }\r\n\r\n\r\n    private fun checkLocationPermission(): Boolean {\r\n        if(ContextCompat.checkSelfPermission(this,android.Manifest.permission.ACCESS_FINE_LOCATION)!= PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            if(ActivityCompat.shouldShowRequestPermissionRationale(this,android.Manifest.permission.ACCESS_FINE_LOCATION))\r\n                ActivityCompat.requestPermissions(this, arrayOf(\r\n                    android.Manifest.permission.ACCESS_FINE_LOCATION\r\n                ),MY_PERMISSION_CODE)\r\n            else\r\n                ActivityCompat.requestPermissions(this, arrayOf(\r\n                    android.Manifest.permission.ACCESS_FINE_LOCATION\r\n                ),MY_PERMISSION_CODE)\r\n            return false\r\n        }else\r\n            return true\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.M)\r\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {\r\n        when(requestCode)\r\n        {\r\n            MY_PERMISSION_CODE->{\r\n                if(grantResults.size > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)\r\n                {\r\n                    if(ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)\r\n                        if(checkLocationPermission()){\r\n                            buildLocationRequest();\r\n                            buildLocationCallBack();\r\n\r\n                            fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\r\n                            fusedLocationProviderClient.requestLocationUpdates(locationRequest,locationCallback, Looper.myLooper());\r\n\r\n                            mMap!!.isMyLocationEnabled=true\r\n                        }\r\n                }else{\r\n                    Toast.makeText(this,\"Permission Denied\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onStop() {\r\n\r\n        //fusedLocationProviderClient.removeLocationUpdates(locationCallback)\r\n\r\n        super.onStop()\r\n    }\r\n\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n\r\n        //Init Google Play Services\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){\r\n            if(ContextCompat.checkSelfPermission(this,android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)\r\n            {\r\n                mMap!!.isMyLocationEnabled=true\r\n            }\r\n        }else\r\n            mMap!!.isMyLocationEnabled=true\r\n\r\n        //Enable Zoom Control\r\n        mMap.uiSettings.isZoomControlsEnabled=true\r\n\r\n        //Make event click on Marker\r\n        mMap!!.setOnMarkerClickListener { marker ->\r\n            if(marker.snippet!=null){\r\n                //When user select marker, just get result of the place assign to static variable\r\n                Common.currentResult = currentPlace!!.results!![Integer.parseInt(marker.snippet)]\r\n                //Start new Activity\r\n                val intent = Intent(this@nearby_hospital,ViewPlace::class.java)\r\n                intent.putExtra(\"lat\", currentLat.toString())\r\n                intent.putExtra(\"lng\",currentLng.toString())\r\n                startActivity(intent)\r\n\r\n            }\r\n             true\r\n        }\r\n\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        val id = intent.getStringExtra(\"MemberID\")\r\n\r\n        val intent1 = Intent(this, MainActivity::class.java).apply {\r\n            putExtra(\"MemberID\", id)\r\n        }\r\n        startActivity(intent1)\r\n        return false\r\n    }\r\n\r\n    private fun setActionBar(){\r\n        val actionBar: ActionBar? = supportActionBar\r\n        actionBar!!.title = \"Hospital Near Me\"\r\n        actionBar!!.setDisplayHomeAsUpEnabled(true)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/covid_19shoppingcentre/nearby_hospital.kt	(revision fd3cd09f104de345c7f0c6f8568b00c7b487f6bc)
+++ app/src/main/java/com/example/covid_19shoppingcentre/nearby_hospital.kt	(date 1606383155322)
@@ -243,7 +243,7 @@
 
     override fun onStop() {
 
-        //fusedLocationProviderClient.removeLocationUpdates(locationCallback)
+        fusedLocationProviderClient.removeLocationUpdates(locationCallback)
 
         super.onStop()
     }
