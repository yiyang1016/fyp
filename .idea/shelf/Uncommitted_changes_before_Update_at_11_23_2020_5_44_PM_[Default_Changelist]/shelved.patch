Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.covid_19shoppingcentre\">\r\n    <!--\r\n         The ACCESS_COARSE/FINE_LOCATION permissions are not required to use\r\n         Google Maps Android API v2, but you must specify either coarse or fine\r\n         location permissions for the \"MyLocation\" functionality.\r\n    -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\r\n    <uses-feature\r\n        android:name=\"android.hardware.bluetooth_le\"\r\n        android:required=\"true\" />\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\" /> <!-- Required only if your app isn't using the Device Companion Manager. -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher_covid_round\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n\r\n        <activity android:name=\".tabletSetLimitation\"></activity>\r\n        <activity android:name=\".tabletStoreControlMain\"\r\n            android:parentActivityName=\".Store_List\"></activity>\r\n        <activity\r\n            android:name=\".DashboardMain\"\r\n            android:parentActivityName=\".StaffMainActivity\" />\r\n        <activity\r\n            android:name=\".GenerateDailyReportJava\"\r\n            android:parentActivityName=\".StaffMainActivity\"/>\r\n        <activity\r\n            android:name=\".StaffRegistration\"\r\n            android:parentActivityName=\".StaffMainActivity\" />\r\n        <activity\r\n            android:name=\".PieChartMaleFemale\"\r\n            android:parentActivityName=\".DashboardMain\" />\r\n        <activity android:name=\".uploadStorePicture\" />\r\n        <activity\r\n            android:name=\".storeRegistration\"\r\n            android:parentActivityName=\".tabletStoreControlMain\" />\r\n        <activity android:name=\".questionMobile\" />\r\n        <activity android:name=\".tabletStoreCurrentCust\" />\r\n        <activity\r\n            android:name=\".tabletStoreLoginVarification\"\r\n            android:parentActivityName=\".StaffMainActivity\" />\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"com.example.covid_19shoppingcentre\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"@string/google_maps_key\" />\r\n\r\n        <activity\r\n            android:name=\".social_distance_score_history\"\r\n            android:label=\"Score History\"\r\n            android:parentActivityName=\".MainActivity\" />\r\n        <activity\r\n            android:name=\".ViewPlace\"\r\n            android:label=\"Hospital Near Me\"\r\n            android:parentActivityName=\".nearby_hospital\" />\r\n        <activity\r\n            android:name=\".distance_tracking\"\r\n            android:label=\"Distance Tracking\"\r\n            android:parentActivityName=\".MainActivity\" />\r\n        <activity\r\n            android:name=\".nearby_hospital\"\r\n            android:label=\"Hospital Near Me\"\r\n            android:parentActivityName=\".MainActivity\" />\r\n        <activity\r\n            android:name=\".StaffMainActivity\"\r\n            android:label=\"Staff Main Page\" />\r\n        <activity android:name=\".CheckInScCustomer_List\" />\r\n        <activity android:name=\".MemberInformationActivity\" />\r\n        <activity\r\n            android:name=\".QRScannerActivity\"\r\n            android:label=\"QR Scanner\" />\r\n        <activity android:name=\".CustomerInformationActivity\" />\r\n        <activity android:name=\".ReserveStore_List\" />\r\n        <activity android:name=\".ReserveDate\" />\r\n        <activity android:name=\".ReserveTime\" />\r\n        <activity android:name=\".ReserveConfirmationActivity\" />\r\n        <activity android:name=\".Reservation_List\" />\r\n        <activity\r\n            android:name=\".ReserveDetailsActivity\"\r\n            android:launchMode=\"singleTop\" />\r\n        <activity android:name=\".ReserveDetailsPassActivity\" />\r\n        <activity android:name=\".StaffStoreDetailsActivity\" />\r\n        <activity android:name=\".Store_List\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:label=\"MidValley\" />\r\n        <activity android:name=\".MemberRegister\" />\r\n        <activity android:name=\".MemberLogin\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity android:name=\".QRCodeGenerator\" />\r\n        <activity android:name=\".BodyTemperature\">\r\n        </activity>\r\n        <activity android:name=\".QRCodeScanner\"/>\r\n        <activity android:name=\".VisitHistory\"/>\r\n        <activity android:name=\".CustomerRecordSelecting\"/>\r\n        <activity android:name=\".QRScannerCheckOutActivity\"/>\r\n        <activity android:name=\".CheckOutShoppingActivity\"/>\r\n\r\n        <service\r\n            android:name=\".checkService\"\r\n            android:enabled=\"true\"\r\n            android:exported=\"true\" />\r\n        <service\r\n            android:name=\".staffService\"\r\n            android:enabled=\"true\"\r\n            android:exported=\"true\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.gms.version\"\r\n            android:value=\"@integer/google_play_services_version\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision f08bc1dc424e47625f2623b1cdf1dc507012d5e0)
+++ app/src/main/AndroidManifest.xml	(date 1606099423894)
@@ -76,19 +76,18 @@
         <activity
             android:name=".social_distance_score_history"
             android:label="Score History"
-            android:parentActivityName=".MainActivity" />
+             />
         <activity
             android:name=".ViewPlace"
             android:label="Hospital Near Me"
-            android:parentActivityName=".nearby_hospital" />
+            />
         <activity
             android:name=".distance_tracking"
             android:label="Distance Tracking"
-            android:parentActivityName=".MainActivity" />
+            />
         <activity
             android:name=".nearby_hospital"
-            android:label="Hospital Near Me"
-            android:parentActivityName=".MainActivity" />
+            />
         <activity
             android:name=".StaffMainActivity"
             android:label="Staff Main Page" />
Index: app/src/main/java/com/example/covid_19shoppingcentre/distance_tracking.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.covid_19shoppingcentre\r\n\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.bluetooth.BluetoothAdapter\r\nimport android.bluetooth.BluetoothDevice\r\nimport android.bluetooth.BluetoothManager\r\nimport android.bluetooth.le.BluetoothLeScanner\r\nimport android.bluetooth.le.ScanCallback\r\nimport android.bluetooth.le.ScanResult\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.core.app.NotificationCompat\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.database.*\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\nimport kotlinx.android.synthetic.main.activity_distance_tracking.*\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\n\r\n\r\nclass distance_tracking : AppCompatActivity() {\r\n\r\n    private val REQUEST_BLUETOOTH_TURN_ON = 1\r\n    private val BLE_SCAN_PERIOD: Long = 10000\r\n    private lateinit var bleAdapter: BluetoothAdapter\r\n    private lateinit var bleManager: BluetoothManager\r\n    private lateinit var bleScanner: BluetoothLeScanner\r\n    private lateinit var bleScanCallback: BleScanCallback\r\n    private var bleScanResults = mutableMapOf<String?, BluetoothDevice?>()\r\n    private lateinit var bleScanHandler: Handler\r\n\r\n    //    var deviceList = findViewById<EditText>(R.id.showDevice)\r\n   // private lateinit var database:     DatabaseReference\r\n    private var database = FirebaseDatabase.getInstance().getReference(\"Member\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_distance_tracking)\r\n\r\n        setActionBar()\r\n        var count = 0\r\n        var secondCount = 0\r\n        bleScanHandler = Handler()\r\n        bleManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager\r\n        bleAdapter = bleManager.adapter\r\n        if (!bleAdapter.isEnabled) {\r\n            val bluetoothTurnOn = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\r\n            startActivityForResult(bluetoothTurnOn, REQUEST_BLUETOOTH_TURN_ON)\r\n        }\r\n\r\n        bleImageButton.setOnClickListener { view ->\r\n            //check Bluetooth status every 3 seconds\r\n            if(count == 0){\r\n                val handler = Handler()\r\n                handler.postDelayed(object : Runnable {\r\n                    override fun run() {\r\n                        //Call your function here\r\n                        if (!bleAdapter.isEnabled) {\r\n                            showNotification(\r\n                                \"Please Enable Bluetooth\",\r\n                                \"Kindly Enable the Bluetooth inside your phone\"\r\n                            )\r\n                        }\r\n                        handler.postDelayed(this, 3000)//3 sec delay\r\n                    }\r\n                }, 0)\r\n\r\n                status.text = \"STATUS : ON\"\r\n                count++\r\n                bleStartScan.run()\r\n                val bluetoothScanninghandler = Handler()\r\n                bluetoothScanninghandler.postDelayed(object : Runnable {\r\n                    override fun run() {\r\n                        //Call your function here\r\n                        println(bleScanCallback.addRssi.map { \"bleScanCallback.addRSSi\" + it.key.toString() + '-' + it.value.toString() })\r\n                        if (bleScanCallback.addRssi.isNotEmpty()) {\r\n                            for ((key, value) in bleScanCallback.addRssi) {\r\n                                val rssi = value\r\n                                if (compareValues(rssi, -69) < 0) {\r\n                                    marksDeduct(2)\r\n                                    showNotification(\"Close Distance\", \"Please Keep Your Social Distance More than 1.5 Meters.\")\r\n                                } else if (compareValues(rssi, -73) < 0) {\r\n                                    marksDeduct(3)\r\n                                    showNotification(\"Close Distance\", \"Please Keep Your Social Distance More than 1.5 Meters.\")\r\n                                } else if (compareValues(rssi, -79) < 0) {\r\n                                    marksDeduct(5)\r\n                                    showNotification(\"Close Distance\", \"Please Keep Your Social Distance More than 1.5 Meters.\")\r\n                                }\r\n                            }\r\n                        }\r\n                        bleScanCallback.addRssi.clear()\r\n                        bluetoothScanninghandler.postDelayed(this, 10000)//10 sec delay\r\n                    }\r\n                }, 0)\r\n                secondCount++\r\n                if(secondCount == 1){\r\n                    onPause()\r\n                }else if(secondCount == 2){\r\n                    onResume()\r\n                    secondCount = 0\r\n                }\r\n            }else if(count == 1 ){\r\n                count = 0\r\n                status.text = \"STATUS : OFF\"\r\n                bleStopScan\r\n                secondCount++\r\n                onPause()\r\n            }\r\n\r\n            //Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG).setAction(\"Action\", null).show()\r\n\r\n        }\r\n    }\r\n\r\n    //Start Scan nearby bluetooth\r\n    private val bleStartScan = Runnable {\r\n        bleScanner = bleAdapter.bluetoothLeScanner\r\n        bleScanCallback = BleScanCallback(bleScanResults as HashMap<String?, BluetoothDevice?>)\r\n        bleScanCallback.setContext(this.applicationContext)\r\n        bleScanner.startScan(bleScanCallback)\r\n        Toast.makeText(this.applicationContext, \"Start Scan the Nearby Device\", Toast.LENGTH_SHORT)\r\n            .show()\r\n        //bleScanHandler.postDelayed(bleStopScan, this.BLE_SCAN_PERIOD)\r\n    }\r\n\r\n    private val bleStopScan = Runnable {\r\n        if (bleScanner != null) {\r\n            bleScanner.stopScan(bleScanCallback)\r\n            println(bleScanCallback.addRssi.map { \"bleScanCallback.addRSSi\" + it.key.toString() + '-' + it.value.toString()})\r\n            bleScanResults.clear()\r\n            bleScanCallback.resultOfScan.clear()\r\n            bleScanCallback.addRssi.clear()\r\n        }\r\n        Toast.makeText(this.applicationContext, \" BLE Scanning Ended\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n\r\n    class BleScanCallback(resultMap: HashMap<String?, BluetoothDevice?>) : ScanCallback() {\r\n        var resultOfScan = resultMap\r\n        private var context: Context? = null\r\n        var deviceNameAddress: HashMap<String?, String?> = HashMap<String?, String?>()\r\n        var addRssi: HashMap<String?, Int?> = HashMap<String?, Int?>()\r\n\r\n        fun setContext(context: Context) {\r\n            this.context = context\r\n        }\r\n\r\n        override fun onScanResult(callbackType: Int, result: ScanResult?) {\r\n            addScanResult(result)\r\n        }\r\n\r\n        override fun onBatchScanResults(results: MutableList<ScanResult>?) {\r\n            results?.forEach { result -> addScanResult(result) }\r\n        }\r\n\r\n        override fun onScanFailed(errorCode: Int) {\r\n            Toast.makeText(\r\n                this.context,\r\n                \"BLE Failed to scan\" + \"Error Code: \" + errorCode,\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n        }\r\n\r\n        fun addScanResult(scanResult: ScanResult?) {\r\n            val bleDevice = scanResult?.device\r\n            val deviceAddress = bleDevice?.address\r\n            val rssiValue = scanResult?.rssi\r\n            if (!resultOfScan.contains(deviceAddress)) {\r\n                resultOfScan.put(deviceAddress, bleDevice)\r\n                if (this.context != null) {\r\n                    //Toast.makeText(this.context,bleDevice?.name + \":\" + bleDevice?.address + \"RSSI\" + rssiValue,Toast.LENGTH_SHORT).show()\r\n                    deviceNameAddress.put(bleDevice?.name, deviceAddress)\r\n                    addRssi.put(deviceAddress, rssiValue)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        when (requestCode) {\r\n            REQUEST_BLUETOOTH_TURN_ON -> {\r\n                when (requestCode) {\r\n                    RESULT_OK -> {\r\n                        Toast.makeText(\r\n                            this.applicationContext,\r\n                            \"Bluetooth Activated\",\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                    RESULT_CANCELED -> {\r\n                        Toast.makeText(\r\n                            this.applicationContext,\r\n                            \"Bluetooth Failed\",\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun showNotification(title: String, message: String) {\r\n        val mNotificationManager =\r\n            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r\n            val channel = NotificationChannel(\r\n                \"COVID-19 Shopping Centre\",\r\n                \"Bluetooth Disable\",\r\n                NotificationManager.IMPORTANCE_DEFAULT\r\n            )\r\n            channel.description = \"Bluetooth are disabled by user\"\r\n            mNotificationManager.createNotificationChannel(channel)\r\n        }\r\n        val fullScreenIntent = Intent(this, distance_tracking::class.java)\r\n        val fullScreenPendingIntent = PendingIntent.getActivity(\r\n            this, 0,\r\n            fullScreenIntent, PendingIntent.FLAG_UPDATE_CURRENT\r\n        )\r\n        val mBuilder = NotificationCompat.Builder(applicationContext, \"COVID-19 Shopping Centre\")\r\n            .setSmallIcon(R.mipmap.ic_launcher_covid_round) // notification icon\r\n            .setContentTitle(title) // title for notification\r\n            .setContentText(message)// message for notification\r\n            .setAutoCancel(true) // clear notification after click\r\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\r\n            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\r\n            .setFullScreenIntent(fullScreenPendingIntent, true)\r\n        mNotificationManager.notify(0, mBuilder.build())\r\n    }\r\n\r\n    fun marksDeduct(marks: Int) {\r\n        val id = intent.getStringExtra(\"MemberID\")\r\n        val ref = FirebaseDatabase.getInstance().getReference(\"SocialDistanceScore\")\r\n        var scoreId = \"\"\r\n        val refSearch =\r\n            FirebaseDatabase.getInstance().getReference(\"SocialDistanceScore\").orderByKey()\r\n                .limitToLast(1)\r\n\r\n\r\n        //Create new score history data\r\n        refSearch.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onCancelled(error: DatabaseError) {\r\n                val text = \"Connection Failed\"\r\n                Toast.makeText(applicationContext, text, Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            override fun onDataChange(p0: DataSnapshot) {\r\n                if (p0.exists()) {\r\n                    for (p0 in p0.children) {\r\n                        val getScoreId = p0.getValue(Score::class.java)\r\n                        scoreId = getScoreId?.Score_Id.toString()\r\n                    }\r\n\r\n                    val cal = ((scoreId.substring(1, 6)).toInt()) + 1\r\n                    val num = 100000 + cal\r\n                    val newId = \"S\" + num.toString().substring(1, 6)\r\n\r\n                    val currentDateTime1  = LocalDateTime.now()\r\n                    val dateFormat1: DateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyyMMdd\")\r\n                    val dateText1 = currentDateTime1.format(dateFormat1)\r\n                    val data = SocialDistanceScore(\r\n                        newId,\r\n                        \"Close Contact\",\r\n                        marks,\r\n                        dateText1, id\r\n                    )\r\n\r\n                    ref.child(newId).setValue(data)\r\n\r\n                    val refSearch = FirebaseDatabase.getInstance().getReference().child(\"Member\")\r\n                        .orderByChild(\"Id\").equalTo(id)\r\n                    refSearch.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                        override fun onCancelled(error: DatabaseError) {\r\n                            val text = \"Connection Failed\"\r\n                            Toast.makeText(applicationContext, text, Toast.LENGTH_SHORT).show()\r\n                        }\r\n\r\n                        override fun onDataChange(p0: DataSnapshot) {\r\n                            if (p0.exists()) {\r\n                                for (p0 in p0.children) {\r\n                                    val current = Integer.parseInt(p0.child(\"CurrentScore\").value.toString()) - marks\r\n                                    if(current <= 70 || current <= 50 || current <= 30){\r\n                                        showNotification(\"Warning Message\", \"Social Distance Mark Low than $current. Please keep social distance before get bar!\")\r\n                                    }\r\n                                    database.child(id).child(\"CurrentScore\").setValue(current)\r\n                                }\r\n                            } else {\r\n                                Toast.makeText(applicationContext, \"CurrentScore Missing from the database\", Toast.LENGTH_SHORT)\r\n                                    .show()\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                }\r\n\r\n            }\r\n\r\n        })\r\n    }\r\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\r\n        //Inflate the menu; this adds items to the action bar if it is present\r\n        menuInflater.inflate(R.menu.history, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        val id = intent.getStringExtra(\"MemberID\")\r\n\r\n        val intent1 = Intent(this, MainActivity::class.java).apply {\r\n            putExtra(\"MemberID\", id)\r\n        }\r\n        startActivity(intent1)\r\n\r\n        //Handle action bar item clicks here.\r\n        //The action bar will automatically handle clicks on the Home/Up button, so long\r\n        //as you specify a parent activity in AndroidManfest.xml\r\n        when (item.itemId){\r\n            R.id.historyBtn ->{\r\n                val intent = Intent(this, social_distance_score_history::class.java)\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n        return false\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n    }\r\n    private fun setActionBar(){\r\n        val actionBar: ActionBar? = supportActionBar\r\n        actionBar!!.title = \"Distance Tracking\"\r\n        actionBar!!.setDisplayHomeAsUpEnabled(true)\r\n    }\r\n\r\n\r\n    override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        val st  = status.text.toString()\r\n        outState.putString(\"savedString\", st)\r\n    }\r\n\r\n    override fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n        status.setText(savedInstanceState.getString(\"savedString\"))\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/covid_19shoppingcentre/distance_tracking.kt	(revision f08bc1dc424e47625f2623b1cdf1dc507012d5e0)
+++ app/src/main/java/com/example/covid_19shoppingcentre/distance_tracking.kt	(date 1606124667030)
@@ -12,18 +12,18 @@
 import android.bluetooth.le.ScanResult
 import android.content.Context
 import android.content.Intent
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.os.Handler
 import android.view.Menu
 import android.view.MenuItem
 import android.widget.Toast
 import androidx.appcompat.app.ActionBar
+import androidx.appcompat.app.AppCompatActivity
 import androidx.core.app.NotificationCompat
-import com.google.android.material.snackbar.Snackbar
-import com.google.firebase.database.*
-import com.google.firebase.database.ktx.database
-import com.google.firebase.ktx.Firebase
+import com.google.firebase.database.DataSnapshot
+import com.google.firebase.database.DatabaseError
+import com.google.firebase.database.FirebaseDatabase
+import com.google.firebase.database.ValueEventListener
 import kotlinx.android.synthetic.main.activity_distance_tracking.*
 import java.time.LocalDateTime
 import java.time.format.DateTimeFormatter
@@ -39,7 +39,7 @@
     private lateinit var bleScanCallback: BleScanCallback
     private var bleScanResults = mutableMapOf<String?, BluetoothDevice?>()
     private lateinit var bleScanHandler: Handler
-
+    var count = 0
     //    var deviceList = findViewById<EditText>(R.id.showDevice)
    // private lateinit var database:     DatabaseReference
     private var database = FirebaseDatabase.getInstance().getReference("Member")
@@ -48,7 +48,7 @@
         setContentView(R.layout.activity_distance_tracking)
 
         setActionBar()
-        var count = 0
+
         var secondCount = 0
         bleScanHandler = Handler()
         bleManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
@@ -58,6 +58,9 @@
             startActivityForResult(bluetoothTurnOn, REQUEST_BLUETOOTH_TURN_ON)
         }
 
+        //val getVisible = Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE)
+        //startActivityForResult(getVisible, 0)
+
         bleImageButton.setOnClickListener { view ->
             //check Bluetooth status every 3 seconds
             if(count == 0){
@@ -76,8 +79,8 @@
                 }, 0)
 
                 status.text = "STATUS : ON"
-                count++
                 bleStartScan.run()
+                count++
                 val bluetoothScanninghandler = Handler()
                 bluetoothScanninghandler.postDelayed(object : Runnable {
                     override fun run() {
@@ -88,13 +91,22 @@
                                 val rssi = value
                                 if (compareValues(rssi, -69) < 0) {
                                     marksDeduct(2)
-                                    showNotification("Close Distance", "Please Keep Your Social Distance More than 1.5 Meters.")
+                                    showNotification(
+                                        "Close Distance",
+                                        "Please Keep Your Social Distance More than 1.5 Meters."
+                                    )
                                 } else if (compareValues(rssi, -73) < 0) {
                                     marksDeduct(3)
-                                    showNotification("Close Distance", "Please Keep Your Social Distance More than 1.5 Meters.")
+                                    showNotification(
+                                        "Close Distance",
+                                        "Please Keep Your Social Distance More than 1.5 Meters."
+                                    )
                                 } else if (compareValues(rssi, -79) < 0) {
                                     marksDeduct(5)
-                                    showNotification("Close Distance", "Please Keep Your Social Distance More than 1.5 Meters.")
+                                    showNotification(
+                                        "Close Distance",
+                                        "Please Keep Your Social Distance More than 1.5 Meters."
+                                    )
                                 }
                             }
                         }
@@ -102,19 +114,19 @@
                         bluetoothScanninghandler.postDelayed(this, 10000)//10 sec delay
                     }
                 }, 0)
-                secondCount++
+
+                /*secondCount++
                 if(secondCount == 1){
                     onPause()
                 }else if(secondCount == 2){
                     onResume()
                     secondCount = 0
-                }
+                }*/
             }else if(count == 1 ){
-                count = 0
-                status.text = "STATUS : OFF"
-                bleStopScan
-                secondCount++
                 onPause()
+                //secondCount++
+            }else{
+                onResume()
             }
 
             //Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG).setAction("Action", null).show()
@@ -136,7 +148,8 @@
     private val bleStopScan = Runnable {
         if (bleScanner != null) {
             bleScanner.stopScan(bleScanCallback)
-            println(bleScanCallback.addRssi.map { "bleScanCallback.addRSSi" + it.key.toString() + '-' + it.value.toString()})
+            
+            //println(bleScanCallback.addRssi.map { "bleScanCallback.addRSSi" + it.key.toString() + '-' + it.value.toString()})
             bleScanResults.clear()
             bleScanCallback.resultOfScan.clear()
             bleScanCallback.addRssi.clear()
@@ -178,7 +191,11 @@
             if (!resultOfScan.contains(deviceAddress)) {
                 resultOfScan.put(deviceAddress, bleDevice)
                 if (this.context != null) {
-                    //Toast.makeText(this.context,bleDevice?.name + ":" + bleDevice?.address + "RSSI" + rssiValue,Toast.LENGTH_SHORT).show()
+                    Toast.makeText(
+                        this.context,
+                        bleDevice?.name + ":" + bleDevice?.address + "RSSI" + rssiValue,
+                        Toast.LENGTH_SHORT
+                    ).show()
                     deviceNameAddress.put(bleDevice?.name, deviceAddress)
                     addRssi.put(deviceAddress, rssiValue)
                 }
@@ -265,7 +282,7 @@
                     val num = 100000 + cal
                     val newId = "S" + num.toString().substring(1, 6)
 
-                    val currentDateTime1  = LocalDateTime.now()
+                    val currentDateTime1 = LocalDateTime.now()
                     val dateFormat1: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyyMMdd")
                     val dateText1 = currentDateTime1.format(dateFormat1)
                     val data = SocialDistanceScore(
@@ -288,14 +305,22 @@
                         override fun onDataChange(p0: DataSnapshot) {
                             if (p0.exists()) {
                                 for (p0 in p0.children) {
-                                    val current = Integer.parseInt(p0.child("CurrentScore").value.toString()) - marks
-                                    if(current <= 70 || current <= 50 || current <= 30){
-                                        showNotification("Warning Message", "Social Distance Mark Low than $current. Please keep social distance before get bar!")
+                                    val current =
+                                        Integer.parseInt(p0.child("CurrentScore").value.toString()) - marks
+                                    if (current <= 70 || current <= 50 || current <= 30) {
+                                        showNotification(
+                                            "Warning Message",
+                                            "Social Distance Mark Low than $current. Please keep social distance before get bar!"
+                                        )
                                     }
                                     database.child(id).child("CurrentScore").setValue(current)
                                 }
                             } else {
-                                Toast.makeText(applicationContext, "CurrentScore Missing from the database", Toast.LENGTH_SHORT)
+                                Toast.makeText(
+                                    applicationContext,
+                                    "CurrentScore Missing from the database",
+                                    Toast.LENGTH_SHORT
+                                )
                                     .show()
                             }
                         }
@@ -325,7 +350,7 @@
         //The action bar will automatically handle clicks on the Home/Up button, so long
         //as you specify a parent activity in AndroidManfest.xml
         when (item.itemId){
-            R.id.historyBtn ->{
+            R.id.historyBtn -> {
                 val intent = Intent(this, social_distance_score_history::class.java)
                 startActivity(intent)
                 return true
@@ -338,7 +363,9 @@
 
     override fun onPause() {
         super.onPause()
-
+        count++
+        status.text = "STATUS : OFF"
+        bleStopScan
     }
     private fun setActionBar(){
         val actionBar: ActionBar? = supportActionBar
@@ -346,17 +373,8 @@
         actionBar!!.setDisplayHomeAsUpEnabled(true)
     }
 
-
-    override fun onSaveInstanceState(outState: Bundle) {
-        super.onSaveInstanceState(outState)
-        val st  = status.text.toString()
-        outState.putString("savedString", st)
+    override fun onResume() {
+        super.onResume()
+        count = 0
     }
-
-    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
-        super.onRestoreInstanceState(savedInstanceState)
-        status.setText(savedInstanceState.getString("savedString"))
-    }
-
-
 }
Index: app/src/main/java/com/example/covid_19shoppingcentre/MemberInformationActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.covid_19shoppingcentre\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.icu.text.Transliterator\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextUtils\r\nimport android.text.TextWatcher\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.covid_19shoppingcentre.models.addShoppingCentreCheckIn\r\nimport com.google.firebase.database.*\r\nimport com.karumi.dexter.Dexter\r\nimport com.karumi.dexter.PermissionToken\r\nimport com.karumi.dexter.listener.PermissionDeniedResponse\r\nimport com.karumi.dexter.listener.PermissionGrantedResponse\r\nimport com.karumi.dexter.listener.PermissionRequest\r\nimport com.karumi.dexter.listener.single.PermissionListener\r\nimport github.nisrulz.qreader.QRDataListener\r\nimport github.nisrulz.qreader.QREader\r\nimport kotlinx.android.synthetic.main.sc_member_check_in_information.*\r\nimport kotlinx.android.synthetic.main.sc_member_check_in_scanner.*\r\nimport java.text.DateFormat\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\n\r\nclass MemberInformationActivity : AppCompatActivity() {\r\n\r\n    private var userDatabase = FirebaseDatabase.getInstance().getReference()\r\n    private  var database = FirebaseDatabase.getInstance().getReference(\"Member\")\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.sc_member_check_in_information)\r\n\r\n        getMemberInformation()\r\n        setActionBar()\r\n\r\n        val temperatures = resources.getStringArray(R.array.Temperature)\r\n        val checkInButton = findViewById<Button>(R.id.checkInBtn)\r\n        val backButton = findViewById<Button>(R.id.backBtn)\r\n        val spinner = findViewById<Spinner>(R.id.temperatureSpinner)\r\n\r\n        if (spinner != null){\r\n            val adapter = ArrayAdapter(this,\r\n                android.R.layout.simple_spinner_item, temperatures)\r\n            spinner.adapter = adapter\r\n\r\n            spinner.onItemSelectedListener = object :\r\n                AdapterView.OnItemSelectedListener {\r\n                @SuppressLint(\"ResourceAsColor\")\r\n                override fun onItemSelected(parent: AdapterView<*>,\r\n                                            view: View, position: Int, id: Long) {\r\n                    when {\r\n                        temperatures[position].toString() == \"below 36.0°C\" -> {\r\n                            bodyTemperatureResult.text = \"Temperature too low, are you OK?\"\r\n                            checkInButton.isEnabled = false\r\n                            checkInButton.setBackgroundColor(R.color.greyColor)\r\n                        }\r\n                        temperatures[position].toString() == \"above 37.5°C\" -> {\r\n                            bodyTemperatureResult.text = \"Body Temperature is too high. customer are not allowed to enter the Shopping Centre\"\r\n                            checkInButton.isEnabled = false\r\n                            checkInButton.setBackgroundColor(R.color.greyColor)\r\n                        }\r\n                        temperatures[position].toString() == \"Please Select a Temperature\" -> {\r\n                            checkInButton.isEnabled = false\r\n                            checkInButton.setBackgroundColor(R.color.greyColor)\r\n                        }\r\n                        else -> {\r\n                            bodyTemperatureResult.text = \"Body Temperature is fine. customer are allowed to enter the Shopping Centre\"\r\n                            checkInButton.isEnabled = true\r\n                            checkInButton.setBackgroundResource(R.drawable.button_corner2)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                override fun onNothingSelected(parent: AdapterView<*>) {\r\n                    bodyTemperatureResult.text = \"Please select a temperature\"\r\n                    checkInButton.isEnabled = false\r\n                }\r\n            }\r\n        }\r\n\r\n        val dataSent = intent.getStringExtra(\"EXTRA_MESSAGE\")\r\n\r\n        val query = userDatabase.child(\"Member\").orderByChild(\"Id\").equalTo(dataSent)\r\n        query.addListenerForSingleValueEvent(object : ValueEventListener{\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                if (snapshot.exists()) {\r\n                    for (snapshot in snapshot.children) {\r\n                        var compare = snapshot.child(\"HealthyStatus\").value.toString()\r\n                        if (compare == \"Danger\"){\r\n                            checkInButton.isEnabled = false\r\n                            spinner.isEnabled = false\r\n                            bodyTemperatureResult.text = \"This member is currently in Danger State\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Toast.makeText(applicationContext, \"ERROR\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        })\r\n\r\n        checkInButton.setOnClickListener {\r\n            checkInMember()\r\n        }\r\n\r\n        backButton.setOnClickListener {\r\n            back()\r\n        }\r\n    }\r\n\r\n    //@RequiresApi(Build.VERSION_CODES.O)\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun getMemberInformation() {\r\n        val calendar1 = Calendar.getInstance()\r\n        val currentDay = DateFormat.getDateInstance(DateFormat.SHORT).format(calendar1.time)\r\n        val currentDateTime  = LocalDateTime.now()\r\n        val hourMinuteFormat: DateTimeFormatter = DateTimeFormatter.ofPattern(\"hh:mm a\")\r\n        val hourMinuteText = currentDateTime.format(hourMinuteFormat)\r\n\r\n        val dataSent = intent.getStringExtra(\"EXTRA_MESSAGE\")\r\n\r\n        val query = userDatabase.child(\"Member\").orderByChild(\"Id\").equalTo(dataSent)\r\n        query.addListenerForSingleValueEvent(object : ValueEventListener{\r\n            @SuppressLint(\"ResourceAsColor\")\r\n            override fun onDataChange(s0: DataSnapshot) {\r\n                try {\r\n                    if(s0.exists()){\r\n                        for (s0 in s0.children) {\r\n                            val ref= userDatabase.child(\"Member\").child(s0.key.toString())\r\n                            ref.addValueEventListener(object : ValueEventListener {\r\n                                override fun onDataChange(p0: DataSnapshot) {\r\n                                    try {\r\n                                        if (p0.exists()) {\r\n                                            memberName.text = (p0.child(\"Name\").value.toString())\r\n                                            memberIC.text = (p0.child(\"IC_Number\").value.toString())\r\n                                            memberPhone.text = (p0.child(\"PhoneNumber\").value.toString())\r\n                                            CheckInTime.text = \"$hourMinuteText\"\r\n                                            recentBodyStatus.text = (p0.child(\"HealthyStatus\").value.toString())\r\n                                            CheckInDate.text = currentDay.toString()\r\n                                        }\r\n                                    } catch (e: Exception) {\r\n                                        Toast.makeText(applicationContext, \"ERROR\", Toast.LENGTH_SHORT).show()\r\n                                    }\r\n                                }\r\n\r\n                                override fun onCancelled(error: DatabaseError) {\r\n                                    Toast.makeText(applicationContext, \"ERROR\", Toast.LENGTH_SHORT).show()\r\n                                }\r\n                            })\r\n                        }\r\n                    } else{\r\n                        val intent1 = Intent(this@MemberInformationActivity, QRScannerActivity::class.java).apply {\r\n                        }\r\n\r\n                        val builder = AlertDialog.Builder(this@MemberInformationActivity)\r\n                        //set title for alert dialog\r\n                        builder.setTitle(\"Warning\")\r\n                        //set message for alert dialog\r\n                        builder.setMessage(\"Member does not Exist!!\")\r\n                        builder.setIcon(android.R.drawable.ic_dialog_alert)\r\n\r\n                        //performing positive action\r\n                        builder.setPositiveButton(\"OK\"){dialogInterface, which ->\r\n                            startActivity(intent1)\r\n                        }\r\n                        val alertDialog: AlertDialog = builder.create()\r\n                        alertDialog.setCancelable(false)\r\n                        alertDialog.show()\r\n                    }\r\n                } catch (e: Exception) {\r\n                    Toast.makeText(applicationContext, \"ERROR\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Toast.makeText(applicationContext, \"ERROR\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        })\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun checkInMember() {\r\n\r\n        val dataSent = intent.getStringExtra(\"EXTRA_MESSAGE\")\r\n\r\n        val intent1 = Intent(this, StaffMainActivity::class.java).apply {\r\n            putExtra(\"whatMessage\", \"message\")\r\n        }\r\n\r\n        val currentDateTime  = LocalDateTime.now()\r\n        val dateFormat: DateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyyMMdd\")\r\n        val hourMinuteFormat: DateTimeFormatter = DateTimeFormatter.ofPattern(\"hh:mm a\")\r\n        val dateText = currentDateTime.format(dateFormat)\r\n        val hourMinuteText = currentDateTime.format(hourMinuteFormat)\r\n\r\n        val query = userDatabase.child(\"Member\").orderByChild(\"Id\").equalTo(dataSent)\r\n        query.addListenerForSingleValueEvent(object : ValueEventListener{\r\n            override fun onDataChange(s0: DataSnapshot) {\r\n                    for (s0 in s0.children) {\r\n                        val checkInTime = hourMinuteText.toString().trim()\r\n                        val phone = (s0.child(\"PhoneNumber\").value.toString())\r\n                        val temperature = temperatureSpinner.selectedItem.toString().trim()\r\n                        val statusNow = \"checkIn\"\r\n                        val checkOutTime = \"pending\"\r\n                        val name = (s0.child(\"Name\").value.toString())\r\n\r\n                        val addQuery = FirebaseDatabase.getInstance().getReference(\"ShoppingCentre\")\r\n                            .child(dateText.toString())\r\n                        //val customerID = s0.key.toString()\r\n\r\n                        if (dataSent != null && checkInTime != null) {\r\n                            val writeNewCheckIn = addShoppingCentreCheckIn(\r\n                                checkInTime,\r\n                                name,\r\n                                phone,\r\n                                dataSent,\r\n                                temperature,\r\n                                statusNow,\r\n                                checkOutTime\r\n                            )\r\n\r\n                            addQuery.child(dataSent).setValue(writeNewCheckIn)\r\n                                .addOnCompleteListener {\r\n                                    Toast.makeText(\r\n                                        applicationContext,\r\n                                        \"Check In Successful\",\r\n                                        Toast.LENGTH_SHORT\r\n                                    ).show()\r\n\r\n\r\n                                    val refSearch = FirebaseDatabase.getInstance().getReference().child(\"SocialDistanceScore\")\r\n                                        .orderByChild(\"member_Id\").equalTo(dataSent).limitToLast(1)\r\n                                    refSearch.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                                        override fun onCancelled(error: DatabaseError) {\r\n                                            val text = \"Connection Failed\"\r\n                                            Toast.makeText(applicationContext, text, Toast.LENGTH_SHORT).show()\r\n                                        }\r\n\r\n                                        val currentDateTime1  = LocalDateTime.now()\r\n                                        val dateFormat1: DateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyyMMdd\")\r\n                                        val dateText1 = currentDateTime1.format(dateFormat1)\r\n                                        override fun onDataChange(p0: DataSnapshot) {\r\n                                            if (p0.exists()) {\r\n                                                for (p0 in p0.children) {\r\n                                                    if(p0.child(\"score_Date\").value.toString() != dateText1.toString()){\r\n                                                        resetMark()\r\n                                                    }\r\n                                                }\r\n                                            } else {\r\n                                                Toast.makeText(applicationContext, \"Current Score Missing from the database\", Toast.LENGTH_SHORT)\r\n                                                    .show()\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                    startActivity(intent1)\r\n                                }\r\n\r\n                        }\r\n                    }\r\n            }\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Toast.makeText(applicationContext, \"ERROR\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun back() {\r\n        val intent1 = Intent(this, StaffMainActivity::class.java).apply {\r\n            putExtra(\"EXTRA_MESSAGE\", \"message\")\r\n        }\r\n        startActivity(intent1)\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        val intent1 = Intent(this, StaffMainActivity::class.java).apply {\r\n            putExtra(\"EXTRA_MESSAGE\", \"message\")\r\n        }\r\n        startActivity(intent1)\r\n        return false\r\n    }\r\n\r\n    private fun setActionBar(){\r\n        val actionBar: ActionBar? = supportActionBar\r\n        actionBar!!.title = \"Member Information\"\r\n        actionBar!!.setDisplayHomeAsUpEnabled(true)\r\n    }\r\n\r\n    fun resetMark() {\r\n        val ref = FirebaseDatabase.getInstance().getReference(\"SocialDistanceScore\")\r\n        var scoreId = \"\"\r\n        val refSearch =\r\n            FirebaseDatabase.getInstance().getReference(\"SocialDistanceScore\").orderByKey()\r\n                .limitToLast(1)\r\n\r\n\r\n        //Create new score history data\r\n        refSearch.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onCancelled(error: DatabaseError) {\r\n                val text = \"Connection Failed\"\r\n                Toast.makeText(applicationContext, text, Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            override fun onDataChange(p0: DataSnapshot) {\r\n                if (p0.exists()) {\r\n                    for (p0 in p0.children) {\r\n                        val getScoreId = p0.getValue(Score::class.java)\r\n                        scoreId = getScoreId?.Score_Id.toString()\r\n                    }\r\n                    val dataSent = intent.getStringExtra(\"EXTRA_MESSAGE\")\r\n\r\n                    val cal = ((scoreId.substring(1, 6)).toInt()) + 1\r\n                    val num = 100000 + cal\r\n                    val newId = \"S\" + num.toString().substring(1, 6)\r\n\r\n                    val currentDateTime1  = LocalDateTime.now()\r\n                    val dateFormat1: DateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyyMMdd\")\r\n                    val dateText1 = currentDateTime1.format(dateFormat1)\r\n\r\n                    val data = SocialDistanceScore(\r\n                        newId,\r\n                        \"Check In\",\r\n                        100,\r\n                        dateText1, dataSent.toString()\r\n                    )\r\n\r\n                    ref.child(newId).setValue(data)\r\n\r\n                    val refSearch = FirebaseDatabase.getInstance().getReference().child(\"Member\")\r\n                        .orderByChild(\"Id\").equalTo(dataSent)\r\n                    refSearch.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                        override fun onCancelled(error: DatabaseError) {\r\n                            val text = \"Connection Failed\"\r\n                            Toast.makeText(applicationContext, text, Toast.LENGTH_SHORT).show()\r\n                        }\r\n\r\n                        override fun onDataChange(p0: DataSnapshot) {\r\n                            if (p0.exists()) {\r\n                                for (p0 in p0.children) {\r\n                                    database.child(dataSent).child(\"CurrentScore\").setValue(100)\r\n                                }\r\n                            } else {\r\n                                Toast.makeText(applicationContext, \"Member Missing\", Toast.LENGTH_SHORT)\r\n                                    .show()\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                }\r\n\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        val intent1 = Intent(this, StaffMainActivity::class.java).apply {\r\n            putExtra(\"EXTRA_MESSAGE\", \"message\")\r\n        }\r\n        startActivity(intent1)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/covid_19shoppingcentre/MemberInformationActivity.kt	(revision f08bc1dc424e47625f2623b1cdf1dc507012d5e0)
+++ app/src/main/java/com/example/covid_19shoppingcentre/MemberInformationActivity.kt	(date 1606101953926)
@@ -244,15 +244,14 @@
 
                                     val refSearch = FirebaseDatabase.getInstance().getReference().child("SocialDistanceScore")
                                         .orderByChild("member_Id").equalTo(dataSent).limitToLast(1)
+                                    val currentDateTime1  = LocalDateTime.now()
+                                    val dateFormat1: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyyMMdd")
+                                    val dateText1 = currentDateTime1.format(dateFormat1)
                                     refSearch.addListenerForSingleValueEvent(object : ValueEventListener {
                                         override fun onCancelled(error: DatabaseError) {
                                             val text = "Connection Failed"
                                             Toast.makeText(applicationContext, text, Toast.LENGTH_SHORT).show()
                                         }
-
-                                        val currentDateTime1  = LocalDateTime.now()
-                                        val dateFormat1: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyyMMdd")
-                                        val dateText1 = currentDateTime1.format(dateFormat1)
                                         override fun onDataChange(p0: DataSnapshot) {
                                             if (p0.exists()) {
                                                 for (p0 in p0.children) {
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_23_2020_3_27_AM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_11_23_2020_3_27_AM__Default_Changelist_.xml	(revision f08bc1dc424e47625f2623b1cdf1dc507012d5e0)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_11_23_2020_3_27_AM__Default_Changelist_.xml	(revision f08bc1dc424e47625f2623b1cdf1dc507012d5e0)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_23_2020_3_27_AM_[Default_Changelist]" date="1606073267079" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_23_2020_3_27_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/23/2020 3:27 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ProjectCodeStyleConfiguration\">\r\n  <code_scheme name=\"Project\" version=\"173\">\r\n    <JetCodeStyleSettings>\r\n      <option name=\"PACKAGES_TO_USE_STAR_IMPORTS\">\r\n        <value>\r\n          <package name=\"java.util\" withSubpackages=\"false\" static=\"false\" />\r\n          <package name=\"kotlinx.android.synthetic\" withSubpackages=\"true\" static=\"false\" />\r\n          <package name=\"io.ktor\" withSubpackages=\"true\" static=\"false\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"CODE_STYLE_DEFAULTS\" value=\"KOTLIN_OFFICIAL\" />\r\n    </JetCodeStyleSettings>\r\n    <codeStyleSettings language=\"XML\">\r\n      <indentOptions>\r\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\r\n      </indentOptions>\r\n      <arrangement>\r\n        <rules>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>xmlns:android</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>xmlns:.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*:id</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*:name</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>name</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>style</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>ANDROID_ATTRIBUTE_ORDER</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>.*</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n        </rules>\r\n      </arrangement>\r\n    </codeStyleSettings>\r\n    <codeStyleSettings language=\"kotlin\">\r\n      <option name=\"CODE_STYLE_DEFAULTS\" value=\"KOTLIN_OFFICIAL\" />\r\n    </codeStyleSettings>\r\n  </code_scheme>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/Project.xml	(revision f08bc1dc424e47625f2623b1cdf1dc507012d5e0)
+++ .idea/codeStyles/Project.xml	(date 1606094382285)
@@ -3,9 +3,18 @@
     <JetCodeStyleSettings>
       <option name="PACKAGES_TO_USE_STAR_IMPORTS">
         <value>
-          <package name="java.util" withSubpackages="false" static="false" />
-          <package name="kotlinx.android.synthetic" withSubpackages="true" static="false" />
-          <package name="io.ktor" withSubpackages="true" static="false" />
+          <package name="java.util" alias="false" withSubpackages="false" />
+          <package name="kotlinx.android.synthetic" alias="false" withSubpackages="true" />
+          <package name="io.ktor" alias="false" withSubpackages="true" />
+        </value>
+      </option>
+      <option name="PACKAGES_IMPORT_LAYOUT">
+        <value>
+          <package name="" alias="false" withSubpackages="true" />
+          <package name="java" alias="false" withSubpackages="true" />
+          <package name="javax" alias="false" withSubpackages="true" />
+          <package name="kotlin" alias="false" withSubpackages="true" />
+          <package name="" alias="true" withSubpackages="true" />
         </value>
       </option>
       <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision f08bc1dc424e47625f2623b1cdf1dc507012d5e0)
+++ .idea/gradle.xml	(date 1606123913386)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/example/covid_19shoppingcentre/nearby_hospital.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.covid_19shoppingcentre\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.Canvas\r\nimport android.location.Location\r\nimport android.location.LocationProvider\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.MenuItem\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.covid_19shoppingcentre.Common.Common\r\nimport com.example.covid_19shoppingcentre.Remote.IGoogleAPIService\r\nimport com.example.covid_19shoppingcentre.models.MyPlaces\r\nimport com.google.android.gms.location.*\r\n\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.*\r\nimport kotlinx.android.synthetic.main.activity_nearby_hospital.*\r\nimport retrofit2.Call\r\nimport retrofit2.Response\r\nimport java.lang.StringBuilder\r\nimport java.net.CacheRequest\r\nimport java.util.jar.Manifest\r\nimport javax.security.auth.callback.Callback\r\n\r\nclass nearby_hospital : AppCompatActivity(), OnMapReadyCallback {\r\n\r\n    private lateinit var mMap: GoogleMap\r\n\r\n    private var latitude : Double = 0.toDouble()\r\n    private var longtitude : Double = 0.toDouble()\r\n\r\n    private lateinit var mLastLocation:Location\r\n    private var mMarker: Marker?=null\r\n\r\n    //Location\r\n    lateinit var fusedLocationProviderClient: FusedLocationProviderClient\r\n    lateinit var locationRequest: LocationRequest\r\n    lateinit var locationCallback: LocationCallback\r\n\r\n    companion object{\r\n        private const val  MY_PERMISSION_CODE: Int = 1000\r\n    }\r\n\r\n    lateinit var mService:IGoogleAPIService\r\n\r\n    internal lateinit var currentPlace:MyPlaces\r\n\r\n    //pass current location lat and lng\r\n    public var  currentLat = 0.0\r\n    public var  currentLng = 0.0\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_nearby_hospital)\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        val mapFragment = supportFragmentManager\r\n            .findFragmentById(R.id.maps) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n\r\n        //Init Service\r\n        mService = Common.googleApiService\r\n        setActionBar()\r\n        //Request runtime permission\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){\r\n            if(checkLocationPermission()){\r\n                buildLocationRequest();\r\n                buildLocationCallBack();\r\n\r\n                fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\r\n                fusedLocationProviderClient.requestLocationUpdates(locationRequest,locationCallback, Looper.myLooper());\r\n            }\r\n           }else{\r\n            buildLocationRequest();\r\n            buildLocationCallBack();\r\n\r\n            fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\r\n            fusedLocationProviderClient.requestLocationUpdates(locationRequest,locationCallback, Looper.myLooper());\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun nearByPlace(typePlace: String) {\r\n        //Clear all marker on Map\r\n        //mMap.clear()\r\n        //build URL request base on location\r\n        val url = getUrl(latitude,longtitude,typePlace)\r\n\r\n        mService.getNearbyPlaces(url)\r\n            .enqueue(object :retrofit2.Callback<MyPlaces> {\r\n                override fun onResponse(call: Call<MyPlaces>?,response: Response<MyPlaces>?) {\r\n\r\n                    currentPlace=response!!.body()!!\r\n                    if(response!!.isSuccessful){\r\n\r\n                        for(i in 0 until response!!.body()!!.results!!.size)\r\n                        {\r\n                            val markerOptions = MarkerOptions()\r\n                            val googlePlace = response.body()!!.results!![i]\r\n                            val lat = googlePlace.geometry!!.location!!.lat\r\n                            val lng = googlePlace.geometry!!.location!!.lng\r\n                            val placeName = googlePlace.name\r\n                            val latLng = LatLng(lat,lng)\r\n\r\n                            markerOptions.position(latLng)\r\n                            markerOptions.title(placeName)\r\n                            if(typePlace.equals(\"hospital\"))\r\n                                markerOptions.icon(BitmapDescriptorFactory.defaultMarker())\r\n                            else if(typePlace.equals(\"market\"))\r\n                                markerOptions.icon(BitmapDescriptorFactory.defaultMarker())\r\n                            else if(typePlace.equals(\"restaurant\"))\r\n                                markerOptions.icon(BitmapDescriptorFactory.defaultMarker())\r\n                            else if(typePlace.equals(\"school\"))\r\n                                markerOptions.icon(BitmapDescriptorFactory.defaultMarker())\r\n\r\n                            markerOptions.snippet(i.toString())//Assign index for Market\r\n                            //Add marker to map\r\n                            mMap!!.addMarker(markerOptions)\r\n                            //moveCamera\r\n                            //mMap!!.moveCamera(CameraUpdateFactory.newLatLng(latLng))\r\n                            //mMap!!.animateCamera(CameraUpdateFactory.zoomTo(15f))\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                override fun onFailure(call: Call<MyPlaces>, t: Throwable) {\r\n                    Toast.makeText(baseContext, \"\"+t!!.message,Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n    private fun getUrl(latitude: Double, longtitude: Double, typePlace: String): String {\r\n\r\n        val googlePlaceUrl = StringBuilder(\"https://maps.googleapis.com/maps/api/place/nearbysearch/json\")\r\n        googlePlaceUrl.append(\"?location=$latitude,$longtitude\")\r\n        googlePlaceUrl.append(\"&radius=10000\") //1km\r\n        googlePlaceUrl.append(\"&type=$typePlace\")\r\n        googlePlaceUrl.append(\"&key=AIzaSyDQFRH8H5JA_Tw6Rnwne4CVB2VaNagqvsM\")\r\n\r\n        Log.d(\"URL_DEBUG\",googlePlaceUrl.toString())\r\n        return googlePlaceUrl.toString()\r\n\r\n    }\r\n\r\n    private fun buildLocationCallBack() {\r\n        locationCallback = object : LocationCallback(){\r\n            override fun onLocationResult(p0: LocationResult?) {\r\n                mLastLocation = p0!!.lastLocation//Get Last Location\r\n\r\n                if(mMarker !=null){\r\n                    mMarker!!.remove()\r\n                }\r\n\r\n                latitude = mLastLocation.latitude\r\n                longtitude = mLastLocation.longitude\r\n\r\n                val latLng = LatLng(latitude,longtitude)\r\n                //save lat & lng to public variable\r\n                currentLat = latitude\r\n                currentLng = longtitude\r\n                val markerOptions = MarkerOptions()\r\n                    .position(latLng)\r\n                    .title(\"Your position\")\r\n                    .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN))\r\n                mMarker = mMap!!.addMarker(markerOptions)\r\n\r\n                //Move Camera\r\n                mMap!!.moveCamera(CameraUpdateFactory.newLatLng(latLng))\r\n                mMap.moveCamera(CameraUpdateFactory.zoomTo(13f))\r\n                nearByPlace(\"hospital\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun buildLocationRequest() {\r\n        locationRequest = LocationRequest()\r\n        locationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n        locationRequest.interval = 5000\r\n        locationRequest.fastestInterval = 3000\r\n        locationRequest.smallestDisplacement = 10f\r\n    }\r\n\r\n\r\n    private fun checkLocationPermission(): Boolean {\r\n        if(ContextCompat.checkSelfPermission(this,android.Manifest.permission.ACCESS_FINE_LOCATION)!= PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            if(ActivityCompat.shouldShowRequestPermissionRationale(this,android.Manifest.permission.ACCESS_FINE_LOCATION))\r\n                ActivityCompat.requestPermissions(this, arrayOf(\r\n                    android.Manifest.permission.ACCESS_FINE_LOCATION\r\n                ),MY_PERMISSION_CODE)\r\n            else\r\n                ActivityCompat.requestPermissions(this, arrayOf(\r\n                    android.Manifest.permission.ACCESS_FINE_LOCATION\r\n                ),MY_PERMISSION_CODE)\r\n            return false\r\n        }else\r\n            return true\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.M)\r\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {\r\n        when(requestCode)\r\n        {\r\n            MY_PERMISSION_CODE->{\r\n                if(grantResults.size > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)\r\n                {\r\n                    if(ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)\r\n                        if(checkLocationPermission()){\r\n                            buildLocationRequest();\r\n                            buildLocationCallBack();\r\n\r\n                            fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\r\n                            fusedLocationProviderClient.requestLocationUpdates(locationRequest,locationCallback, Looper.myLooper());\r\n\r\n                            mMap!!.isMyLocationEnabled=true\r\n                        }\r\n                }else{\r\n                    Toast.makeText(this,\"Permission Denied\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onStop() {\r\n        fusedLocationProviderClient.removeLocationUpdates(locationCallback)\r\n        super.onStop()\r\n    }\r\n\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n\r\n        //Init Google Play Services\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){\r\n            if(ContextCompat.checkSelfPermission(this,android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)\r\n            {\r\n                mMap!!.isMyLocationEnabled=true\r\n            }\r\n        }else\r\n            mMap!!.isMyLocationEnabled=true\r\n\r\n        //Enable Zoom Control\r\n        mMap.uiSettings.isZoomControlsEnabled=true\r\n\r\n        //Make event click on Marker\r\n        mMap!!.setOnMarkerClickListener { marker ->\r\n            if(marker.snippet!=null){\r\n                //When user select marker, just get result of the place assign to static variable\r\n                Common.currentResult = currentPlace!!.results!![Integer.parseInt(marker.snippet)]\r\n                //Start new Activity\r\n                val intent = Intent(this@nearby_hospital,ViewPlace::class.java)\r\n                intent.putExtra(\"lat\", currentLat.toString())\r\n                intent.putExtra(\"lng\",currentLng.toString())\r\n                startActivity(intent)\r\n\r\n            }\r\n             true\r\n        }\r\n\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        val id = intent.getStringExtra(\"MemberID\")\r\n\r\n        val intent1 = Intent(this, MainActivity::class.java).apply {\r\n            putExtra(\"MemberID\", id)\r\n        }\r\n        startActivity(intent1)\r\n        return false\r\n    }\r\n\r\n    private fun setActionBar(){\r\n        val actionBar: ActionBar? = supportActionBar\r\n        actionBar!!.title = \"Hospital Near Me\"\r\n        actionBar!!.setDisplayHomeAsUpEnabled(true)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/covid_19shoppingcentre/nearby_hospital.kt	(revision f08bc1dc424e47625f2623b1cdf1dc507012d5e0)
+++ app/src/main/java/com/example/covid_19shoppingcentre/nearby_hospital.kt	(date 1606100514933)
@@ -62,6 +62,9 @@
     //pass current location lat and lng
     public var  currentLat = 0.0
     public var  currentLng = 0.0
+
+    var currentMember: String? = ""
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_nearby_hospital)
@@ -69,7 +72,7 @@
         val mapFragment = supportFragmentManager
             .findFragmentById(R.id.maps) as SupportMapFragment
         mapFragment.getMapAsync(this)
-
+        currentMember = intent.getStringExtra("MemberID")
         //Init Service
         mService = Common.googleApiService
         setActionBar()
@@ -239,7 +242,9 @@
     }
 
     override fun onStop() {
-        fusedLocationProviderClient.removeLocationUpdates(locationCallback)
+
+        //fusedLocationProviderClient.removeLocationUpdates(locationCallback)
+
         super.onStop()
     }
 
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_11_22_2020_5_23_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_11_22_2020_5_23_PM__Default_Changelist_.xml
